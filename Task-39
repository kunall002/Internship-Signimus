Task 39: 
create user entity with id, name, email  and create a endpoint (save-user) in controller and save the data in DB using service layer
import jakarta.persistence.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.stereotype.Service;
import org.springframework.stereotype.Repository;
import org.springframework.stereotype.Controller;
import org.springframework.data.jpa.repository.JpaRepository;

// Entity
@Entity
@Table(name = "users")
class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    private String email;

    // Constructor
    public User() {}

    public User(Long id, String name, String email) {
        this.id = id;
        this.name = name;
        this.email = email;
    }

    // Getters and Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
    
    // toString Method
    @Override
    public String toString() {
        return "User{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", email='" + email + '\'' +
                '}';
    }
}

// Repository
@Repository
interface UserRepository extends JpaRepository<User, Long> {}

// Service
@Service
class UserService {
    @Autowired
    private UserRepository userRepository;

    public User saveUser(User user) {
        return userRepository.save(user);
    }
}

// Controller
@RestController
@RequestMapping("/users")
class UserController {
    @Autowired
    private UserService userService;

    @PostMapping("/save-user")
    public ResponseEntity<User> saveUser(@RequestBody User user) {
        User savedUser = userService.saveUser(user);
        return ResponseEntity.ok(savedUser);
    }
}
spring.application.name=blog-application
# set the mysql database properties
spring.datasource.url=jdbc:mysql://localhost:3306/test
spring.datasource.username=root
spring.datasource.password=root
# Hibernate properties
spring.jpa.hibernate.ddl-auto=update
# Enable logging
logging.level.org.hibernate.SQL =DEBUG
# Show SQL
spring.jpa.show-sql=true
# set the hibernate dialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

